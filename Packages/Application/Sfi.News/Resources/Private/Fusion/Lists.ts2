prototype(Flowpack.Listable:Listable) {
	sortProperty = 'date'
	sortOrder = 'DESC'
}

prototype(Flowpack.Listable:ContentCaseShort) < prototype(Sfi.Shared:ContentCaseShort)

# Needed for legacy
prototype(Sfi.News:List) < prototype(Flowpack.Listable:ListNode)

# Show latest news
prototype(Sfi.News:Latest) < prototype(Flowpack.Listable:List) {
	wrapClass = 'NewsLatest'
	listTitle = ${Translation.translate('newsLatest.listTitle', null, [], null, 'Sfi.Sfi')}
	listTitleClass = 'SectionDivider--Service'
	archiveLink = '~/sfi-today'
	archiveLinkTitle =  ${Translation.translate('newsLatest.archiveLinkTitle', null, [], null, 'Sfi.Sfi')}
	archiveLinkClass = 'ButtonInline News-MoreButton paddingLeft-none'

	prototype(Flowpack.Listable:Listable) {
		@process.tmpl = ${'<div class="NewsLatest">' + value + '</div>'}
		listClass = 'NewsLatest-Grid medium-block-grid-2 small-block-grid-1'
		limit = 6
		paginationEnabled = false
		collection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
	}

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${'NodeType_Sfi.News:AbstractNews'}
		}
	}
}

prototype(Sfi.News:NewsRelated) < prototype(Flowpack.Listable:List) {
	archiveLink = '~/sfi-today'
	archiveLinkTitle = ${Translation.translate('newsLatest.archiveLinkTitle', null, [], null, 'Sfi.Sfi')}

	prototype(Flowpack.Listable:Listable) {
		limit = 4
		paginationEnabled = ${false}
		collection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
		collection.@process.filterOutSelf {
			expression = ${q(value).filter('[_identifier != "' + documentNode.identifier + '"]').get()}
			@position = 'start'
		}
	}
	prototype(Sfi.News:NewsShort) {
		templatePath = 'resource://Sfi.News/Private/Templates/NewsShortSmall.html'
	}

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${'NodeType_Sfi.News:AbstractNews'}
		}
	}
}



prototype(Sfi.News:TopList) < prototype(Flowpack.Listable:Listable) {
	importantNews = ${q(site).find('[instanceof Sfi.News:ImportantMixin]').filter('[important = TRUE]').get()}
	# We have to filter out past announcements
	importantAnnouncements = ${q(this.importantNews).filter('[instanceof Sfi.News:Announcement]').get()}
	importantAnnouncements.@process.filterByDate = ${q(value).count() > 0 ? q(value).filterByDate('date', Date.Now()).get() : value}
	importantNotAnnouncements = ${q(this.importantNews).filter('[!instanceof Sfi.News:Announcement]').get()}
	@context.importantAnnouncements = ${this.importantAnnouncements}
	collection = ${q(this.importantAnnouncements).add(q(this.importantNotAnnouncements)).get()}
	collection.@process.sort = ${q(value).count() > 0 ? q(value).sort('importantSort', 'ASC').get() : value}
	@context.collection = ${this.collection}

	listClass = 'Carousel--Cover js-carousel-1x'
	itemRenderer = 'Sfi.News:TopShort'
	limit = 3
	paginationEnabled = ${false}

	@cache {
		mode = 'cached'
		# Get the nearest announcement and calculate the maximumLifetime for cache based on time to it
		maximumLifetime = ${q(importantAnnouncements).count() > 0 ? q(importantAnnouncements).sort('date', 'ASC').first().property('date').timestamp - Date.now().timestamp : null}
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${'NodeType_Sfi.News:ImportantMixin'}
		}
	}
}




prototype(Sfi.News:CategorizedList) < prototype(Neos.Fusion:Tag) {
	content = Neos.Fusion:Collection {
		collection = ${q(documentNode).find('[instanceof Sfi.News:Category]').get()}
		itemName = 'categoryNode'
		iterationName = 'iterator'
		itemRenderer = Flowpack.Listable:List {
			listTitle = ${categoryNode.properties.title}
			listTitleClass = 'H3 textAlign-center'
			prototype(Flowpack.Listable:Listable) {
				paginationEnabled = ${false}
				collection = ${q(categoryNode).find('[instanceof Flowpack.Listable:ListableMixin]').get()}
			}
		}
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${'DescendantOf_' + documentNode.identifier}
		}
	}
	@process.contentElementWrapping = ContentElementWrapping
}

prototype(Sfi.News:ListByTag) < prototype(Flowpack.Listable:List) {
	listTitle = ${Translation.translate('listByTag.archiveLinkTitle', null, [], null, 'Sfi.Sfi')}
	listTitleClass = 'SectionDivider--Service'

	@context.collection = ${q(site).find('[instanceof Sfi.News:AbstractNews]').get()}
	@context.collection.@process.filterByReference = ${q(node).property('tag') ? q(value).filterByReference('tags', q(node).property('tag')).get() : q(value).filterByReference('tags', documentNode).get()}
	prototype(Flowpack.Listable:Listable) {
		paginationEnabled = true
		listClass = 'medium-block-grid-2 small-block-grid-1'
		collection = ${collection}
	}

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${'NodeType_Sfi.News:AbstractNews'}
			2 = ${'Node_' + node.identifier}
		}
	}
	@if.notEmpty = ${q(collection).count() > 0}
	@process.contentElementWrapping = ContentElementWrapping
}


prototype(Sfi.News:CategoryMenu) < prototype(Menu) {
	templatePath = 'resource://Sfi.News/Private/Templates/CategoryMenu.html'

	rootNode = ${rootNode}
	rootIsCurrent = ${rootNode == documentNode ? true : false}

	itemCollection = ${q(rootNode).children('[instanceof Sfi.News:Category]').get()}
}


prototype(Sfi.News:Archive) < prototype(Flowpack.Listable:List) {
	renderer.content.listMenu = Sfi.News:CategoryMenu {
		@position = 'after listTitleTag'
	}

	listTitle = ${q(node).property('title')}
	listTitleClass = 'SectionDivider--Service'
	archiveLink = ''

	prototype(Flowpack.Listable:Listable) {
		listClass = 'large-block-grid-3 medium-block-grid-2 small-block-grid-1'
		limit = 10000
		itemsPerPage = 24
		paginationEnabled = true
		collection = ${q(documentNode).find('[instanceof Flowpack.Listable:ListableMixin]').get()}

		@cache {
			mode = 'dynamic'
			entryIdentifier {
				node = ${node}
			}
			entryDiscriminator = ${request.arguments.currentPage}
			context {
				1 = 'node'
				2 = 'documentNode'
				3 = 'site'
			}
			entryTags {
				1 = ${'Node_' + documentNode.identifier}
				2 = ${'DescendantOf_' + documentNode.identifier}
			}
		}
	}
}
