include: **/*.ts2

prototype(Sfi.Shared:TextWithImage) {
	attributes.class = ${'TextWithImage ' + node.properties.variant}
	headline = Neos.NodeTypes:Headline {
		@override.node = ${q(node).children('headline').get(0)}
	}
	text = Neos.NodeTypes:Text {
		@override.node = ${q(node).children('text').get(0)}
	}
	image = Neos.NodeTypes:Image {
		@override.node = ${q(node).children('image').get(0)}
	}
	prototype(Neos.NodeTypes:Image) {
		maximumWidth = 600
	}
}

prototype(Sfi.Shared:Asset) {
	attributes.class = ${node.properties.variant == 'Asset-Button' ? 'Button AssetButton' : 'ButtonInline AssetInline'}
	attributes.href = ${'asset://' + node.properties.asset.identifier}
	attributes.href.@process.convertUris = Neos.Neos:ConvertUris
	attributes.href.@if.notInBackend = ${!node.context.inBackend}
}

prototype(Sfi.Shared:Link) {
	attributes.class = ${node.properties.variant == 'Link-Button' ? 'Button LinkButton' : 'ButtonInline LinkInline'}
	attributes.href = ${node.properties.target}
	attributes.href.@process.convertUris = Neos.Neos:ConvertUris {
		forceConversion = true
	}
	attributes.href.@if.notInBackend = ${!node.context.inBackend}
}

prototype(Sfi.Shared:ImageLink) {
	attributes.class = ${'ImageLink ' + node.properties.variant}
	maximumWidth = 300
	maximumHeight = 250
	allowCropping = TRUE
	allowUpScaling = TRUE
	link.@process.convertUris = Neos.Neos:ConvertUris {
		forceConversion = TRUE
	}
	link.@if.notInBackend = ${!node.context.inBackend}
}

prototype(Sfi.Shared:Group) {
	@class = 'Neos\\Fusion\\FusionObjects\\TagImplementation'
	iterator = ${iterator}
	attributes.style = ${node.properties.style}
	attributes.class = ${'Container ' + node.properties.class}
	content = Neos.Neos:ContentCollectionRenderer
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${'Node_' + node.identifier}
			2 = ${'DescendantOf_' + node.identifier}
		}
	}
}

prototype(Sfi.Shared:Well) < prototype(Sfi.Shared:Group) {
	attributes.class = 'Well'
}


prototype(Sfi.Shared:ListByReferences) < prototype(Neos.Fusion:Tag) {
	@override.itemRendererType = ${q(node).property('itemRenderer')}
	content = Neos.Fusion:Collection {
		collection = ${q(node).property('references')}
		itemRenderer = Sfi.Shared:ContentCaseShort {
			byType {
				@position = 'start'
				condition = ${itemRendererType}
				type = ${itemRendererType}
			}
		}
		itemName = 'node'
		iterationName = 'iterator'
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${'NodeType_Flowpack.Listable:ListableMixin'}
			2 = ${'Node_' + node.identifier}
		}
	}
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}
