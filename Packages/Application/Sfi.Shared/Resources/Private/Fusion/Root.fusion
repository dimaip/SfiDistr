include: **/*.fusion

prototype(Sfi.Shared:TextWithImage) {
	attributes.class = ${'TextWithImage ' + node.properties.variant}
	headline = Neos.NodeTypes:Headline {
		@override.node = ${q(node).children('headline').get(0)}
	}
	text = Neos.NodeTypes:Text {
		@override.node = ${q(node).children('text').get(0)}
	}
	image = Neos.NodeTypes:Image {
		@override.node = ${q(node).children('image').get(0)}
	}
	prototype(Neos.NodeTypes:Image) {
		maximumWidth = 600
	}
}

prototype(Sfi.Shared:Asset) {
	attributes.data-signature = ${Json.stringify({signee: node.properties.signee, signeePosition: node.properties.signeePosition, signDate: Date.format(node.properties.signDate, 'Y.m.d H:i:s'), signKey: node.properties.asset.resource.sha1})}
	attributes.data-signature.@if.onlySigned = ${node.properties.variant == 'Asset-Signed'}
	attributes.class = ${node.properties.variant == 'Asset-Button' ? 'Button AssetButton' : 'ButtonInline AssetInline'}
	attributes.href = ${'asset://' + node.properties.asset.identifier}
	attributes.href.@process.convertUris = Neos.Neos:ConvertUris
	attributes.href.@if.notInBackend = ${!node.context.inBackend}
}

prototype(Sfi.Shared:Link) {
	attributes.class = Neos.Fusion:Case {
		linkButton {
			condition = ${node.properties.variant == 'Link-Button'}
			renderer = 'Button LinkButton'
		}
		linkButtonAlt {
			condition = ${node.properties.variant == 'Link-Button-Alt'}
			renderer = 'Button LinkButton Button--warn'
		}
		linkInline {
			condition = ${node.properties.variant == 'Link-Inline'}
			renderer = 'ButtonInline LinkInline'
		}
	}
	attributes.href = ${node.properties.target}
	attributes.href.@process.convertUris = Neos.Neos:ConvertUris {
		forceConversion = true
	}
	attributes.href.@if.notInBackend = ${!node.context.inBackend}
}

prototype(Sfi.Shared:ImageLink) {
	attributes.class = ${'ImageLink ' + node.properties.variant}
	maximumWidth = 300
	maximumHeight = 250
	allowCropping = TRUE
	allowUpScaling = TRUE
	link.@process.convertUris = Neos.Neos:ConvertUris {
		forceConversion = TRUE
	}
	link.@if.notInBackend = ${!node.context.inBackend}
}

prototype(Sfi.Shared:Group) < prototype(Neos.Fusion:Tag) {
	attributes.style = ${node.properties.style}
	attributes.class = ${'Container ' + node.properties.class}
	attributes.itemprop = ${node.properties.itemprop ? node.properties.itemprop : null}
	content = Neos.Neos:ContentCollectionRenderer {
		@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${Neos.Caching.nodeTag(node)}
			2 = ${Neos.Caching.descendantOfTag(node)}
		}
	}
}

prototype(Sfi.Shared:Well) < prototype(Sfi.Shared:Group) {
	attributes.class = 'Well'
}


prototype(Sfi.Shared:ListByReferences) < prototype(Neos.Fusion:Tag) {
	@override.itemRendererType = ${q(node).property('itemRenderer')}
	content = Neos.Fusion:Collection {
		collection = ${q(node).property('references')}
		itemRenderer = Sfi.Shared:ContentCaseShort {
			byType {
				@position = 'start'
				condition = ${itemRendererType}
				type = ${itemRendererType}
			}
		}
		itemName = 'node'
		iterationName = 'iterator'
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${Neos.Caching.nodeTypeTag('Flowpack.Listable:ListableMixin')}
			2 = ${Neos.Caching.nodeTag(node)}
		}
	}
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}
