prototype(Sfi.Sfi:Person) {
	@override.variant = ${q(node).property('isRector') ? 'Rector' : (q(node).property('isProRector') || q(node).property('isSenior') || q(node).property('isChairperson')) ? 'Rich' : 'Simple'}
	templatePath = ${'resource://Sfi.Sfi/Private/Templates/NodeTypes/Person' + variant + '.html'}
	partialRootPath = 'resource://Sfi.Sfi/Private/Partials'
	layoutRootPath = 'resource://Sfi.Sfi/Private/Layouts'
	sectionMenu = ${siblingsMenu}

	main = Neos.Neos:ContentCollection {
		nodePath = 'main'
	}

	listByTag = Sfi.News:ListByTag

	experience = Neos.Neos:ContentCollection {
		nodePath = 'experience'
	}
	experienceSum = Sfi.Sfi:TimeIntervalSum {
		path = 'experience'
	}
	experienceSpeciality = Neos.Neos:ContentCollection {
		nodePath = 'experienceSpeciality'
	}
	experienceSpecialitySum = Sfi.Sfi:TimeIntervalSum {
		path = 'experienceSpeciality'
	}

	coverCollection = Neos.Neos:ContentCollection {
		nodePath = 'coverCollection'
		prototype(Neos.NodeTypes:Image) {
			maximumWidth = ${variant == 'Rector' ? 770 : variant == 'Rich' ? 480 : 400}
			maximumHeight = ${variant == 'Rector' ? 513 : variant == 'Rich' ? 720 : 600}
			allowCropping = TRUE
		}
	}
	@process.contentElementWrapping = Neos.Neos:ContentElementWrapping
}

prototype(Sfi.Sfi:PersonShort) < prototype(Neos.Neos:Content) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/PersonShort.html'
	title = ${String.stripTags(q(node).property('title'))}
	subject = ${String.stripTags(q(node).property('subject'))}
	degree = ${String.stripTags(q(node).property('degree'))}
	position = ${String.stripTags(q(node).property('position'))}
	quote = ${q(node).property('quote')}
	showPosition = ${q(node).property('isStaff') || q(node).property('isSenior') || q(node).property('isChairperson')}
	freeText = ${q(node).property('freeText')}
	image = ${q(node).find('[instanceof Neos.NodeTypes:Image]').first().property('image')}
}

prototype(Sfi.Sfi:PersonFormalListing) < prototype(Neos.Neos:ContentComponent) {
	renderer = Neos.Fusion:Array {
		1 = Sfi.Sfi:PersonFormalListingByLevel {
			title = 'Состав педагогических (научно-педагогических) работников образовательной организации по образовательной программе 48.03.01 Теология (бакалавриат)'
			level = 'Теология (бакалавриат)'
		}
		2 = Sfi.Sfi:PersonFormalListingByLevel {
			title = 'Состав педагогических (научно-педагогических) работников образовательной организации по образовательной программе 48.04.01 Теология (магистратура)'
			level = 'Теология (магистратура)'
		}
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${'NodeType_Sfi.Sfi:Person'}
		}
	}
}

prototype(Sfi.Sfi:PersonFormalListingByLevel) < prototype(Neos.Fusion:Collection) {
	title = 'to-be-set'
	level = 'to-be-set'
	@context.level = ${String.replace(String.replace(this.level, '(', '\('), ')', '\)')}
	@context.title = ${this.title}
	collection = ${q(site).find('[instanceof Sfi.Sfi:Person]').filter('[isProfessor = TRUE][subject *= "' + this.level + '"]').get()}
	itemName = 'node'
	itemRenderer = Neos.Fusion:Component {
		nodeUri = Neos.Neos:NodeUri {
			node = ${node}
		}
		subject = ${String.pregMatch(node.properties.subject, '/<strong>' + level + ':<\/strong>([^<]*)/u')[1]}
		experienceSum = Sfi.Sfi:TimeIntervalSum {
			path = 'experience'
		}
		experienceSpecialitySum = Sfi.Sfi:TimeIntervalSum {
			path = 'experienceSpeciality'
		}
		renderer = afx`
			<tr itemprop="teachingStaff">
				<td itemprop="fio"><a href={props.nodeUri} class="Link">{node.properties.title}</a></td>
				<td itemprop="post">{node.properties.position}</td>
				<td itemprop="teachingDiscipline">{props.subject}</td>
				<td itemprop="teachingLevel">{node.properties.teachingLevel}</td>
				<td itemprop="teachingQual">{node.properties.teachingQual}</td>
				<td itemprop="degree">{node.properties.degree || 'Без ученой степени'}</td>
				<td itemprop="academStat">{node.properties.degreeTitle || 'Без ученого звания'}</td>
				<td itemprop="employeeQualification">{node.properties.education}</td>
				<td itemprop="profDevelopment">{node.properties.educationUpgrade}</td>
				<td itemprop="genExperience">{props.experienceSum}</td>
				<td itemprop="specExperience">{props.experienceSpecialitySum}</td>
			</tr>
		`
	}
	@process.wrap = afx`
		<h3 class="H3 marginTop-double marginBottom-single">{title}</h3>
		<table class="Table" itemprop="teachingStaff" style="max-height: 600px">
			<thead>
				<tr>
					<th>Фамилия Имя Отчество</th>
					<th>Должность</th>
					<th>Преподаваемые дисциплины</th>
					<th>Уровень образования</th>
					<th>Квалификация</th>
					<th>Ученая степень</th>
					<th>Ученое звание</th>
					<th>Направление подготовки и/или специальность</th>
					<th>Повышение квалификации и профессиональная переподготовка</th>
					<th>Общий стаж работы*</th>
					<th>Стаж работы по специальности*</th>
				</tr>
			</thead>
			<tbody>
				{value}
			</tbody>
		</table>
		<p class="ParagraphAlt">*Данные указаны на текущую дату</p>
	`
}



prototype(Sfi.Sfi:SeniorShort) < prototype(Sfi.Sfi:PersonShort) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/SeniorShort.html'
	image = ${q(node).property('image')}
}

prototype(Sfi.Sfi:ChairpersonShort) < prototype(Sfi.Sfi:PersonShort) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/ChairpersonShort.html'
	image = ${q(node).property('image')}
}


prototype(Sfi.Shared:ContentCaseShort) < prototype(Neos.Neos:ContentCase) {
	isRector {
		condition = ${q(node).property('isRector')}
		type = 'Sfi.Sfi:RectorShort'
	}
	isProRector {
		condition = ${q(node).property('isProRector')}
		type = 'Sfi.Sfi:ProRectorShort'
	}
	isSenior {
		condition = ${q(node).property('isSenior')}
		type = 'Sfi.Sfi:SeniorShort'
	}
	isChairperson {
		condition = ${q(node).property('isChairperson')}
		type = 'Sfi.Sfi:ChairpersonShort'
	}
}
