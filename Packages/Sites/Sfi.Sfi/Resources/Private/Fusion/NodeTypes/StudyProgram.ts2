prototype(Sfi.Sfi:StudyProgramAsset) <  prototype(Sfi.Shared:Asset) {
	attributes.class = 'ButtonInline AssetInline'
	attributes.href = ${'asset://' + node.properties.asset.identifier}
	attributes.href.@process.convertUris = ConvertUris
	@if.assetNotEmptyOrInBackend = ${node.properties.asset.identifier != null || documentNode.context.inBackend}
}

prototype(Sfi.Sfi:StudyProgram) {
	partialRootPath = 'resource://Sfi.Sfi/Private/Partials'

	sectionMenu = ${sectionMenu}
	level = ${String.stripTags(q(node).parent().parent().property('title'))}
	division = ${String.stripTags(q(node).parent().property('title'))}

	#TODO: translate
	assetDescription = Sfi.Sfi:StudyProgramAsset {
		title = 'Описание образовательной программы'
		@context.node = ${q(node).children('assetDescription').get(0)}
	}
	assetAccreditation = Sfi.Sfi:StudyProgramAsset {
		title = 'Свидетельство о государственной аккредитации'
		@context.node = ${q(node).children('assetAccreditation').get(0)}
	}
	assetInvoice = Sfi.Sfi:StudyProgramAsset {
		title = 'Квитанция для оплаты обучения'
		@context.node = ${q(node).children('assetInvoice').get(0)}
	}
	assetSampleContract = Sfi.Sfi:StudyProgramAsset {
		title = 'Образец договора об оказании платных образовательных услуг'
		@context.node = ${q(node).children('assetSampleContract').get(0)}
	}

	assetsPlanO = ContentCollection {
		nodePath = 'assetsPlanO'
		@process.title = ${'<h3 class="H3 marginVertical-single">Учебный план</h3><h4 class="H4">Очное отделение</h4>' + value}
	}
	assetsPlanOZ = ContentCollection {
		nodePath = 'assetsPlanOZ'
		@process.title = ${'<h4 class="H4">Очно-заочное отделение</h4>' + value}
	}
	assetsPlanZ = ContentCollection {
		nodePath = 'assetsPlanZ'
		@process.title = ${'<h4 class="H4">Заочное отделение</h4>' + value}
	}
	assetsAdmissionRegulations = ContentCollection {
		nodePath = 'assetsAdmissionRegulations'
	}
	assetsSubjectAnnotations = ContentCollection {
		nodePath = 'assetsSubjectAnnotations'
		@process.title = ${'<h3 class="H3">Аннотации к рабочим программам дисциплин</h3>' + value}
	}
	assetsPracticeAnnotations = ContentCollection {
		nodePath = 'assetsPracticeAnnotations'
		@process.title = ${'<h3 class="H3">Практики</h3>' + value}
	}
	assetsMethodical = ContentCollection {
		nodePath = 'assetsMethodical'
		@process.title = ${'<h3 class="H3">Методические и иные документы</h3>' + value}
	}
	description = ContentCollection {
		nodePath = 'description'
	}
	subjects = ContentCollection {
		nodePath = 'subjects'
		@process.title = ${'<h3 class="H3">Список изучаемых дисциплин</h3>' + value}
	}
	schedule = ContentCollection {
		nodePath = 'schedule'
	}
	scheduleO = ContentCollection {
		nodePath = 'scheduleO'
		@process.title = ${'<h3 class="H3 marginVertical-single">Календарный учебный график</h3><h4 class="H4">Очное отделение</h4>' + value}
	}
	scheduleOZ = ContentCollection {
		nodePath = 'scheduleOZ'
		@process.title = ${'<h4 class="H4">Очно-заочное отделение</h4>' + value}
	}
	scheduleZ = ContentCollection {
		nodePath = 'scheduleZ'
		@process.title = ${'<h4 class="H4">Заочное отделение</h4>' + value}
	}
	documentSubmission = ContentCollection {
		nodePath = 'documentSubmission'
		@process.title = ${'<h3 class="H3">Список необходимых документов</h3>' + value}
	}
	exams = ContentCollection {
		nodePath = 'exams'
	}
	payment = ContentCollection {
		nodePath = 'payment'
	}
	admission = ContentCollection {
		nodePath = 'admission'
	}
	admissionContacts = ContentCollection {
		nodePath = 'admissionContacts'
	}
	numberOfSeats = ContentCollection {
		nodePath = 'numberOfSeats'
	}
	admissionRegulations = ContentCollection {
		nodePath = 'admissionRegulations'
	}
	feedback = ContentCollection {
		nodePath = 'feedback'
	}

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${'Node_' + node.identifier}
			2 = ${'DescendantOf_' + node.identifier}
		}
	}
	@process.contentElementWrapping = ContentElementWrapping
}

prototype(Sfi.Sfi:StudyProgramShort) < prototype(Neos.Fusion:Template) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/StudyProgramShort.html'
	node = ${node}
	title = ${String.stripTags(q(node).property('title'))}
	level = ${String.stripTags(q(node).parent().parent().property('title'))}
	division = ${String.stripTags(q(node).parent().property('title'))}
	duration = ${q(node).property('duration')}
	nextDate = ${q(node).property('nextDate')}
	educationForm = ${q(node).property('educationForm')}
	details = ${q(node).property('details')}
	price = ${q(node).property('price')}
	noLink = ${q(node).property('noLink')}
	specialityId = ${q(node).property('specialityId')}
}

prototype(Sfi.Sfi:StudyProgramShortFormal) < prototype(Neos.Fusion:Template) {
	templatePath = 'resource://Sfi.Sfi/Private/Templates/TypoScriptObjects/StudyProgramShortFormal.html'
	node = ${node}
	title = ${String.stripTags(q(node).property('title'))}
	level = ${q(node).parent().parent().property('title')}
	division = ${q(node).parent().property('title')}
	duration = ${q(node).property('duration')}
	specialityId = ${q(node).property('specialityId')}
	specialityName = Neos.Fusion:Tag {
		content = ${q(node).property('specialityName')}
		@process.editable = ContentElementEditable {
			property = 'specialityName'
		}
		@process.contentElementWrapping = ContentElementWrapping
	}
	accreditationDate = ${q(node).property('accreditationDate')}
	noLink = ${q(node).property('noLink')}

	assetDescription = Sfi.Sfi:StudyProgramAsset {
		title = ${String.stripTags(q(node).property('title'))}
		@context.node = ${q(node).children('assetDescription').get(0)}
	}
	assetsPlanO = ContentCollection {
		nodePath = 'assetsPlanO'
	}
	assetsPlanOZ = ContentCollection {
		nodePath = 'assetsPlanOZ'
	}
	assetsPlanZ = ContentCollection {
		nodePath = 'assetsPlanZ'
	}
	scheduleO = ContentCollection {
		nodePath = 'scheduleO'
	}
	scheduleOZ = ContentCollection {
		nodePath = 'scheduleOZ'
	}
	scheduleZ = ContentCollection {
		nodePath = 'scheduleZ'
	}
	practice = ContentCollection {
		nodePath = 'practice'
	}
	distantEdu = ContentCollection {
		nodePath = 'distantEdu'
	}
	assetAccreditation = Sfi.Sfi:StudyProgramAsset {
		title = 'Свидетельство о государственной аккредитации'
		@context.node = ${q(node).children('assetAccreditation').get(0)}
	}
	assetsSubjectAnnotations = ContentCollection {
		nodePath = 'assetsSubjectAnnotations'
	}
	assetsPracticeAnnotations = ContentCollection {
		nodePath = 'assetsPracticeAnnotations'
	}
	assetsMethodical = ContentCollection {
		nodePath = 'assetsMethodical'
	}
	@process.contentElementWrapping = ContentElementWrapping
}

prototype(Sfi.Sfi:StudyProgramsListingAbstract) < prototype(Sfi.Shared:Sections) {
	panels.collection = 'to-be-set'

	templatePath = 'resource://Sfi.Shared/Private/Templates/NodeTypes/Sections.html'
	@context.rootNode = ${q(node).property('rootNode')}
	layout = 'Sections--Accordion'
	tabs>
	panels.itemRenderer {
		accordion = ${q(node).property('specialityId') ? q(node).property('title') + ' (' + q(node).property('specialityId') + ')' : q(node).property('title')}
		panel = Sfi.Sfi:StudyProgramShort
	}
}

prototype(Sfi.Sfi:StudyProgramsListing) < prototype(Sfi.Sfi:StudyProgramsListingAbstract) {
	@context.rootNode = ${q(node).property('rootNode')}
	panels.collection = ${q(rootNode).children().get()}
	templatePath = 'resource://Sfi.Shared/Private/Templates/NodeTypes/Sections.html'

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${'Node_' + node.identifier}
			2 = ${'Node_' + rootNode.identifier}
			3 = ${'DescendantOf_' + rootNode.identifier}
		}
	}
}

prototype(Sfi.Sfi:StudyProgramsListingFormal) {
	templatePath = 'resource://Sfi.Sfi/Private/Fusion/NodeTypes/StudyProgramsListingFormal.html'
	collection = Neos.Fusion:Collection {
		collection = ${q(node).property('references')}
		itemName = 'node'
		itemRenderer = Sfi.Sfi:StudyProgramShortFormal
	}
	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
		}
		entryTags {
			1 = ${'Node_' + node.identifier}
			3 = ${'DescendantOf_' + site.identifier}
		}
	}
}

prototype(Sfi.Sfi:StudyProgramsListingByReference) < prototype(Sfi.Sfi:StudyProgramsListingAbstract) {
	templatePath = 'resource://Sfi.Shared/Private/Templates/NodeTypes/Sections.html'
	panels.collection = ${q(node).property('references')}

	@cache {
		mode = 'cached'
		entryIdentifier {
			node = ${node}
			editPreviewMode = ${editPreviewMode}
		}
		entryTags {
			1 = ${'NodeType_Sfi.Sfi:StudyProgram'}
			2 = ${'Node_' + node.identifier}
		}
	}
}

prototype(PrimaryContent) {
	StudyProgram {
		@position = 'before default'
		condition = ${q(node).is('[instanceof Sfi.Sfi:StudyProgram]')}
		type = 'Sfi.Sfi:StudyProgram'
	}
}
